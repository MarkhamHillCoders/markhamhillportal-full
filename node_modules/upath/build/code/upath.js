/**
* upath http://github.com/anodynos/upath/
*
* A proxy to `path`, replacing `\` with `/` for all results & new methods to normalize & join keeping leading `./` and add, change, default, trim file extensions.
<<<<<<< HEAD
* Version 1.0.2 - Compiled on 2017-11-13 23:11:15
* Repository git://github.com/anodynos/upath
* Copyright(c) 2017 Angelos Pikoulas <agelos.pikoulas@gmail.com>
=======
* Version 1.0.4 - Compiled on 2018-02-26 00:12:05
* Repository git://github.com/anodynos/upath
* Copyright(c) 2018 Angelos Pikoulas <agelos.pikoulas@gmail.com>
>>>>>>> ca3f0939a6dddbc0be4b31a880e53b44c0a0065a
* License MIT
*/

// Generated by uRequire v0.7.0-beta.33 target: 'lib' template: 'nodejs'


<<<<<<< HEAD
var VERSION = '1.0.2'; // injected by urequire-rc-inject-version

var _, extraFn, extraFunctions, isValidExt, name, path, propName, propValue, toUnix, upath, slice = [].slice, indexOf = [].indexOf || function (item) {
=======
var VERSION = '1.0.4'; // injected by urequire-rc-inject-version

var extraFn, extraFunctions, isFunction, isString, isValidExt, name, path, propName, propValue, toUnix, upath, slice = [].slice, indexOf = [].indexOf || function (item) {
>>>>>>> ca3f0939a6dddbc0be4b31a880e53b44c0a0065a
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item)
        return i;
    }
    return -1;
  };
<<<<<<< HEAD
_ = {
  startsWith: require("lodash.startswith"),
  endsWith: require("lodash.endswith"),
  isFunction: require("lodash.isfunction"),
  isString: require("lodash.isstring")
};
path = require("path");
=======
path = require("path");
isFunction = function (val) {
  return val instanceof Function;
};
isString = function (val) {
  return typeof val === "string" || !!val && typeof val === "object" && Object.prototype.toString.call(val) === "[object String]";
};
>>>>>>> ca3f0939a6dddbc0be4b31a880e53b44c0a0065a
upath = exports;
upath.VERSION = typeof VERSION !== "undefined" && VERSION !== null ? VERSION : "NO-VERSION";
toUnix = function (p) {
  var double;
  p = p.replace(/\\/g, "/");
  double = /\/\//;
  while (p.match(double)) {
    p = p.replace(double, "/");
  }
  return p;
};
for (propName in path) {
  propValue = path[propName];
<<<<<<< HEAD
  if (_.isFunction(propValue)) {
=======
  if (isFunction(propValue)) {
>>>>>>> ca3f0939a6dddbc0be4b31a880e53b44c0a0065a
    upath[propName] = function (propName) {
      return function () {
        var args, result;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        args = args.map(function (p) {
<<<<<<< HEAD
          if (_.isString(p)) {
=======
          if (isString(p)) {
>>>>>>> ca3f0939a6dddbc0be4b31a880e53b44c0a0065a
            return toUnix(p);
          } else {
            return p;
          }
        });
        result = path[propName].apply(path, args);
<<<<<<< HEAD
        if (_.isString(result)) {
=======
        if (isString(result)) {
>>>>>>> ca3f0939a6dddbc0be4b31a880e53b44c0a0065a
          return toUnix(result);
        } else {
          return result;
        }
      };
    }(propName);
  } else {
    upath[propName] = propValue;
  }
}
<<<<<<< HEAD
=======
upath.sep = "/";
>>>>>>> ca3f0939a6dddbc0be4b31a880e53b44c0a0065a
extraFunctions = {
  toUnix: toUnix,
  normalizeSafe: function (p) {
    p = toUnix(p);
<<<<<<< HEAD
    if (_.startsWith(p, "./")) {
      if (_.startsWith(p, "./..") || p === "./") {
=======
    if (p.startsWith("./")) {
      if (p.startsWith("./..") || p === "./") {
>>>>>>> ca3f0939a6dddbc0be4b31a880e53b44c0a0065a
        return upath.normalize(p);
      } else {
        return "./" + upath.normalize(p);
      }
    } else {
      return upath.normalize(p);
    }
  },
  normalizeTrim: function (p) {
    p = upath.normalizeSafe(p);
<<<<<<< HEAD
    if (_.endsWith(p, "/")) {
=======
    if (p.endsWith("/")) {
>>>>>>> ca3f0939a6dddbc0be4b31a880e53b44c0a0065a
      return p.slice(0, +(p.length - 2) + 1 || 9000000000);
    } else {
      return p;
    }
  },
  joinSafe: function () {
    var p, result;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    result = upath.join.apply(null, p);
<<<<<<< HEAD
    if (_.startsWith(p[0], "./") && !_.startsWith(result, "./")) {
=======
    if (p[0].startsWith("./") && !result.startsWith("./")) {
>>>>>>> ca3f0939a6dddbc0be4b31a880e53b44c0a0065a
      result = "./" + result;
    }
    return result;
  },
  addExt: function (file, ext) {
    if (!ext) {
      return file;
    } else {
      if (ext[0] !== ".") {
        ext = "." + ext;
      }
<<<<<<< HEAD
      return file + (_.endsWith(file, ext) ? "" : ext);
=======
      return file + (file.endsWith(ext) ? "" : ext);
>>>>>>> ca3f0939a6dddbc0be4b31a880e53b44c0a0065a
    }
  },
  trimExt: function (filename, ignoreExts, maxSize) {
    var oldExt;
    if (maxSize == null) {
      maxSize = 7;
    }
    oldExt = upath.extname(filename);
    if (isValidExt(oldExt, ignoreExts, maxSize)) {
      return filename.slice(0, +(filename.length - oldExt.length - 1) + 1 || 9000000000);
    } else {
      return filename;
    }
  },
  removeExt: function (filename, ext) {
    if (!ext) {
      return filename;
    } else {
      ext = ext[0] === "." ? ext : "." + ext;
      if (upath.extname(filename) === ext) {
        return upath.trimExt(filename);
      } else {
        return filename;
      }
    }
  },
  changeExt: function (filename, ext, ignoreExts, maxSize) {
    if (maxSize == null) {
      maxSize = 7;
    }
    return upath.trimExt(filename, ignoreExts, maxSize) + (!ext ? "" : ext[0] === "." ? ext : "." + ext);
  },
  defaultExt: function (filename, ext, ignoreExts, maxSize) {
    var oldExt;
    if (maxSize == null) {
      maxSize = 7;
    }
    oldExt = upath.extname(filename);
    if (isValidExt(oldExt, ignoreExts, maxSize)) {
      return filename;
    } else {
      return upath.addExt(filename, ext);
    }
  }
};
isValidExt = function (ext, ignoreExts, maxSize) {
  if (ignoreExts == null) {
    ignoreExts = [];
  }
  return ext && ext.length <= maxSize && indexOf.call(ignoreExts.map(function (e) {
    return (e && e[0] !== "." ? "." : "") + e;
  }), ext) < 0;
};
for (name in extraFunctions) {
  extraFn = extraFunctions[name];
  if (upath[name] !== void 0) {
    throw new Error("path." + name + " already exists.");
  } else {
    upath[name] = extraFn;
  }
}

;